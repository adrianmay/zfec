version: "2.1"

jobs:
  cabal-test:
    docker:
      - image: "nixos/nix:2.13.2"

    environment:
      # Let us use features marked "experimental".  For example, most/all of
      # the `nix <subcommand>` forms.  Also, allow import from derivation
      # because cabal2nix requires it.
      NIX_CONFIG: |
        experimental-features = nix-command flakes
        allow-import-from-derivation = true

    steps:
      - "checkout"
      - run:
          name: "Haskell Test Suite"
          no_output_timeout: "30m"
          command: |
            nix run .#cabal-test

  nix-build:
    docker:
      - image: "nixos/nix:2.13.2"

      # CACHIX_AUTH_TOKEN is manually set in the CircleCI web UI and allows us
      # to push to CACHIX_NAME.  CACHIX_NAME tells cachix which cache to push
      # to.
      CACHIX_NAME: "tahoe-lafs-opensource"

    environment:
      # Let us use features marked "experimental".  For example, most/all of
      # the `nix <subcommand>` forms.  Also, allow import from derivation
      # because cabal2nix requires it.
      NIX_CONFIG: |
        experimental-features = nix-command flakes
        allow-import-from-derivation = true

    steps:
      - "run":
          # Get cachix for Nix-friendly caching.
          name: "Install Basic Dependencies"
          command: |
            # Get some build environment dependencies and let them float on a
            # certain release branch.  These aren't involved in the actual
            # package build (only in CI environment setup) so the fact that
            # they float shouldn't hurt reproducibility.
            NIXPKGS="nixpkgs/nixos-23.05"
            nix profile install $NIXPKGS#cachix $NIXPKGS#bash $NIXPKGS#jp

            # Activate our cachix cache for "binary substitution".  This sets
            # up configuration tht lets Nix download something from the cache
            # instead of building it locally, if possible.
            cachix use "${CACHIX_NAME}"

      - "checkout"

      - run:
          name: "nix flake check"
          command: |
            source .circleci/lib.sh
            cache_if_able nix flake show
            cache_if_able nix flake check -v

      - run:
          name: "Nix Build"
          no_output_timeout: "90m"
          command: |
            source .circleci/lib.sh
            cache_if_able nix build --print-build-logs

workflows:
  ci:
    jobs:
      - "cabal-test"
      - "nix-build"
